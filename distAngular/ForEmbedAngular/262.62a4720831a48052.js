"use strict";(self.webpackChunkitaiAngularPlay=self.webpackChunkitaiAngularPlay||[]).push([[262],{98262:(f,u,i)=>{i.r(u),i.d(u,{RegexTestingComponent:()=>x});var o=i(89417),p=i(72200),e=i(73664);const d=(n,t)=>({"alert-success":n,"alert-danger":t});function h(n,t){1&n&&(e.j41(0,"p"),e.EFF(1,"Input is valid!"),e.k0s())}function m(n,t){1&n&&(e.j41(0,"p"),e.EFF(1,"Input is not valid."),e.k0s())}function _(n,t){if(1&n&&(e.j41(0,"div",7),e.nVh(1,h,2,0,"p"),e.nVh(2,m,2,0,"p"),e.k0s()),2&n){const l=e.XpG();e.Y8G("ngClass",e.l_i(3,d,l.isValid,!l.isValid)),e.R7$(),e.vxM(l.isValid?1:-1),e.R7$(),e.vxM(l.isValid?-1:2)}}let x=(()=>{var n;class t{constructor(){this.regexPattern="^[a-zA-Z0-9@#$%^&*()\\-+=~!.,`/?\\s]*$",this.userInput="",this.isValid=null}checkValidity(){try{const r=new RegExp(this.regexPattern);this.isValid=r.test(this.userInput)}catch(r){console.error("Invalid regular expression:",r.message),this.isValid=!1}}onUserInputChange(){this.isValid=null,this.checkValidity()}static#e=n=()=>(this.\u0275fac=function(g){return new(g||t)},this.\u0275cmp=e.VBU({type:t,selectors:[["regex-testing"]],decls:13,vars:3,consts:[[1,"container","mt-4"],[1,"form-group"],["for","regexInput"],["type","text","id","regexInput","placeholder","Enter regex pattern",1,"form-control",3,"ngModelChange","ngModel"],["for","userInput"],["type","text","id","userInput","placeholder","Enter user input",1,"form-control",3,"ngModelChange","input","ngModel"],[1,"mt-3"],[1,"alert",3,"ngClass"]],template:function(g,s){1&g&&(e.j41(0,"pre"),e.EFF(1,"  Regex testing Itai testing\n  Assuming you want to allow only alphanumeric characters (letters and numbers), you can use the following regular expression in most programming languages:\n\n  regex\n  ^[a-zA-Z0-9]+$\n  Explanation:\n\n  ^: Anchors the regex at the start of the string.\n  [a-zA-Z0-9]: Specifies a character class that includes all uppercase and lowercase letters, as well as digits.\n  +: Ensures that there is at least one or more of the allowed characters.\n  $: Anchors the regex at the end of the string.\n  This regular expression ensures that the entire string consists only of alphanumeric characters (letters and numbers) and does not allow any special characters.\n\n\n  If you want to allow specific special characters like a-zA-Z0-9@#$%^&*()-+=~!./,` in addition to alphanumeric characters, you can modify the regular expression as follows:\n  ^[a-zA-Z0-9@#$%^&*()-+=~!./,`]+$\n\n\n"),e.k0s(),e.j41(2,"div",0)(3,"div",1)(4,"label",2),e.EFF(5,"Regex Pattern:"),e.k0s(),e.j41(6,"input",3),e.mxI("ngModelChange",function(a){return e.DH7(s.regexPattern,a)||(s.regexPattern=a),a}),e.k0s()(),e.j41(7,"div",1)(8,"label",4),e.EFF(9,"User Input TYPE TO TEST REGEX:"),e.k0s(),e.j41(10,"input",5),e.mxI("ngModelChange",function(a){return e.DH7(s.userInput,a)||(s.userInput=a),a}),e.bIt("input",function(){return s.onUserInputChange()}),e.k0s()(),e.j41(11,"div",6),e.nVh(12,_,3,6,"div",7),e.k0s()()),2&g&&(e.R7$(6),e.R50("ngModel",s.regexPattern),e.R7$(4),e.R50("ngModel",s.userInput),e.R7$(2),e.vxM(null!==s.isValid?12:-1))},dependencies:[o.YN,o.me,o.BC,o.vS,p.MD,p.YU],encapsulation:2}))}return n(),t})()}}]);