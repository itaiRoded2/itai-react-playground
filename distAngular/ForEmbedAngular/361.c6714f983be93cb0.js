"use strict";(self.webpackChunkitaiAngularPlay=self.webpackChunkitaiAngularPlay||[]).push([[361],{86361:(h,r,a)=>{a.r(r),a.d(r,{AngularElementsComponent:()=>p});var l=a(2615),n=a(73664);let c=(()=>{var o;class e{constructor(){}ngOnInit(){}static#n=o=()=>(this.\u0275fac=function(t){return new(t||e)},this.\u0275cmp=n.VBU({type:e,selectors:[["alert"]],inputs:{message:"message"},decls:2,vars:1,template:function(t,s){1&t&&(n.rj2(0,"div"),n.EFF(1),n.eux()),2&t&&(n.R7$(),n.SpI("This is an alert. ",s.message))},styles:["div[_ngcontent-%COMP%]{border:1px solid black;background:salmon;padding:10px;font-family:sans-serif}"]}))}return o(),e})();var m=a(9337),d=a(81230);function u(o,e){1&o&&(n.rj2(0,"div",1),n.Hgh(1,"div",3),n.rj2(2,"p"),n.EFF(3,"Loading dynamic content..."),n.eux()())}function g(o,e){if(1&o&&n.Hgh(0,"div",2),2&o){const f=n.XpG();n.Avn("innerHTML",f.content,n.npT)}}let p=(()=>{var o;class e{constructor(i,t){this.injector=i,this.domSanitizer=t,this.content=null,this.isLoading=(0,l.vPA)(!0)}ngOnInit(){const i=(0,m.gw)(c,{injector:this.injector});customElements.get("my-alert")||customElements.define("my-alert",i),setTimeout(()=>{this.content=this.domSanitizer.bypassSecurityTrustHtml("<my-alert message='Used [innerHTML]=content. Content loaded dynamically (can be from API) and treated as html element!'></my-alert>"),this.isLoading.set(!1)},2e3)}static#n=o=()=>(this.\u0275fac=function(t){return new(t||e)(n.rXU(l.zZn),n.rXU(d.up))},this.\u0275cmp=n.VBU({type:e,selectors:[["angular-elements"]],decls:5,vars:2,consts:[[1,"container"],[1,"loading-indicator"],[1,"fade-in-content",3,"innerHTML"],[1,"spinner"]],template:function(t,s){1&t&&(n.rj2(0,"pre"),n.EFF(1,"  For ref:\n  Angular elements Testing - How to render angular component as HTML element\n  https://angular.io/guide/elements\n  https://www.youtube.com/watch?v=y73NMviRoPY\n  This example demonstrates how to use Angular Elements to turn an Angular component\n  into a native HTML element that can be used dynamically, even when the HTML comes\n  from a server or API.\n\n  We create a custom element 'my-alert' from our AlertComponent, define it using\n  the browser's customElements API, and then render it inside this component using\n  [innerHTML].\n\n  The content is dynamically loaded after 2 seconds to simulate an API call.\n  You can replace the static HTML string with content coming from a server.\n"),n.eux(),n.rj2(2,"div",0),n.nVh(3,u,4,0,"div",1),n.nVh(4,g,1,1,"div",2),n.eux()),2&t&&(n.R7$(3),n.vxM(s.isLoading()?3:-1),n.R7$(),n.vxM(s.isLoading()?-1:4))},styles:[".container[_ngcontent-%COMP%]{display:flex;justify-content:center;align-items:center;min-height:200px;border:1px solid #ccc;padding:20px;margin-top:20px;border-radius:8px;background-color:#f9f9f9;box-shadow:0 2px 4px #0000001a}.loading-indicator[_ngcontent-%COMP%]{display:flex;flex-direction:column;align-items:center;gap:10px;color:#555;font-size:1.1em}.spinner[_ngcontent-%COMP%]{border:4px solid rgba(0,0,0,.1);border-top:4px solid #3498db;border-radius:50%;width:40px;height:40px;animation:_ngcontent-%COMP%_spin 1s linear infinite}@keyframes _ngcontent-%COMP%_spin{0%{transform:rotate(0)}to{transform:rotate(360deg)}}.fade-in-content[_ngcontent-%COMP%]{opacity:0;animation:_ngcontent-%COMP%_fadeIn .5s forwards}@keyframes _ngcontent-%COMP%_fadeIn{0%{opacity:0}to{opacity:1}}"]}))}return o(),e})()}}]);